import tkinter as tk

# Classe navire
class Navire:
    def __init__(self, taille):
        self.taille = taille  # Nombre de cases occupées par le navire
        self.positions = []  # Liste des coordonnées occupées par le navire
        self.touchees = []  # Liste des positions touchées

    def est_coule(self):
        # Vérifie si toutes les positions du navire ont été touchées
        return all(pos in self.touchees for pos in self.positions)

# Classe interface de jeu
class Plateau:
    def __init__(self):
        self.grille = [["." for _ in range(10)] for _ in range(10)]

    def ajouter_navire(self, navire, positions):
        # Place un navire sur le plateau
        for x, y in positions:
            if self.grille[x][y] != ".":  # Vérifie si la position est libre
                return False
        navire.positions = positions
        for x, y in positions:
            self.grille[x][y] = "N"  # "N" pour indiquer une position occupée par un navire
        return True

    def afficher(self):
        # Affiche la grille
        for ligne in self.grille:
            print(" ".join(ligne))

# Classe joueur
class Joueur:
    def __init__(self, nom):
        self.nom = nom
        self.plateau = Plateau()

    def tirer(self, x, y, plateau_adverse):
        # Vérifie si un tir touche un navire sur le plateau adverse
        if plateau_adverse.grille[x][y] == "N":
            plateau_adverse.grille[x][y] = "X"  # "X" pour indiquer un tir réussi
            print(f"{self.nom} a touché un navire en ({x}, {y}) !")
            return True
        elif plateau_adverse.grille[x][y] == ".":
            plateau_adverse.grille[x][y] = "O"  # "O" pour indiquer un tir manqué
            print(f"{self.nom} a manqué en ({x}, {y}).")
            return False
        else:
            print(f"{self.nom} a déjà tiré sur cette case ({x}, {y}).")
            return None

# Fonction clics sur les boutons
def bouton_clique(bouton, x, y, label):
    if bouton["text"] == " ":  # Si le bouton est vide
        bouton.config(text="X", bg="blue" if label == "Joueur" else "red")
        print(f"{label} a cliqué sur la case ({x}, {y}).")
    else:
        print(f"La case ({x}, {y}) a déjà été cliquée.")

# Fonction pour créer une grille de 10x10 boutons
def creer_grille(frame, grille, label):
    # Ajouter un titre
    titre = tk.Label(frame, text=f"Grille {label}", bg=frame["bg"], font=("Arial", 14, "bold"))
    titre.grid(row=0, column=0, columnspan=10, pady=10)

    # Boucle pour créer une grille 10x10
    for x in range(10): 
        ligne = []  # Une ligne de boutons
        for y in range(10):  # les colonnes
            bouton = tk.Button(
                frame,
                text=" ",
                width=3,
                height=1
            )
            bouton.grid(row=x + 1, column=y, padx=2, pady=2)  # Position
            bouton.config(command=lambda b=bouton, i=x, j=y: bouton_clique(b, i, j, label))  # Lier une action au bouton
            ligne.append(bouton)  # Ajouter le bouton à la ligne
        grille.append(ligne)  # Ajouter la ligne à la grille

# Fonction principale pour l'interface
def interface_principale():
    root = tk.Tk()
    root.title("Bataille Navale")
    root.geometry("800x600")

    # Cadres pour les deux grilles
    frame_joueur = tk.Frame(root, bg="lightblue")
    frame_ordinateur = tk.Frame(root, bg="lightgreen")

    frame_joueur.grid(row=0, column=0, padx=20, pady=20)
    frame_ordinateur.grid(row=0, column=1, padx=20, pady=20)

    # Grilles
    grille_joueur = []
    grille_ordinateur = []

    # Créer les grilles
    creer_grille(frame_joueur, grille_joueur, "Joueur")
    creer_grille(frame_ordinateur, grille_ordinateur, "Ordinateur")

    root.mainloop()

# Lancer l'application
if __name__ == "__main__":
    interface_principale()
